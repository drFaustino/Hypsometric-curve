# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HypsometricCurve
                                 A QGIS plugin
 Calculate and draw the hypsometric curve of a drainage basin starting from a vector layer of contour lines and a vector layer that delimits the basin itself.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-12-17
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Dr. Geol. Faustino Cetraro
        email                : geol-faustino@libero.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

import os
import numpy as np
from qgis.core import QgsRasterLayer, QgsRasterBandStats, QgsProject, QgsUnitTypes
from qgis.core import QgsRectangle
from qgis.core import QgsGeometry, QgsPointXY
from qgis.core import QgsFeature, QgsField, QgsFields, QgsVectorLayer
from qgis.core import QgsWkbTypes

from PyQt5.QtCore import QVariant
from PyQt5.QtWidgets import QFileDialog, QTableWidgetItem
from PyQt5.QtWidgets import QGraphicsScene
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtWidgets import QProgressBar
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QColorDialog
from PyQt5.QtGui import QColor

from matplotlib import pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import csv

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .hypsometric_curve_dialog import HypsometricCurveDialog
import os.path

class HypsometricCurve:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HypsometricCurve_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)
        
        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Hypsometric Curve')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HypsometricCurve', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = os.path.join(self.plugin_dir, 'icon.png')
        self.add_action(icon_path, text=self.tr(u'Hypsometric Curve'), callback=self.run, parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Hypsometric Curve'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""
        
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = HypsometricCurveDialog()
        
        self.dlg.progressBar.setValue(0)
        
        # UI bindings
        self.dlg.cmb_dem.clear()
        self.dlg.cmb_dem.addItems([layer.name() for layer in QgsProject.instance().mapLayers().values() if isinstance(layer, QgsRasterLayer)])

        self.dlg.cmb_band.clear()
        self.dlg.cmb_band.addItems([str(band + 1) for band in range(self.get_band_count())])

        # Clears the combobox before loading new values
        self.dlg.cmb_polibac.clear()

        # Add polygon layers to the combobox
        self.dlg.cmb_polibac.addItems(
            [layer.name() for layer in QgsProject.instance().mapLayers().values() 
            if isinstance(layer, QgsVectorLayer) and layer.geometryType() == QgsWkbTypes.PolygonGeometry]
        )

        self.dlg.pushButton_calc.clicked.connect(self.calculate_hypsometric_curve)
        self.dlg.pushButton_canc.clicked.connect(self.reset_fields)
        self.dlg.pushButton_salva_tab.clicked.connect(self.save_table)
        self.dlg.pushButton_salva_graph.clicked.connect(self.save_graph)
        self.dlg.pushButton_close.clicked.connect(self.dlg.close)

        # min and max class intervals
        self.dlg.spinBox_classi.setMinimum(10)
        self.dlg.spinBox_classi.setMaximum(500)

        # Suggested class value
        self.dlg.spinBox_classi.setValue(255)
      
        # Set the first tab as active
        self.dlg.tabWidget.setCurrentIndex(0)

        # Connect the color select button
        self.dlg.pushButton_color.clicked.connect(self.select_color)

        # Default color
        self.selected_color = QColor("blue")

        # Initialize the graph with the default view (axes 0 to 1)
        self.initialize_graph()

        # Resize columns
        self.resize_columns()

        #unity csr
        self.update_units_label()

        # show the dialog
        self.dlg.show()
        
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
    
    def select_color(self):
        # Usa il dialogo per selezionare un colore
        color = QColorDialog.getColor()

        # Check if a color has been selected
        if color.isValid():
            # Apply the selected color to the background of lbl_color
            self.dlg.lbl_color.setStyleSheet(f"background-color: {color.name()}; border: 1px solid black;")
            
            # Save the selected color
            self.selected_color = color

            # Check if the table is not empty
            if self.dlg.tableWidget_tabella.rowCount() > 0:
                # After selecting the color, update the chart
                self.update_graph_color()

    def update_units_label(self):
        """Update the label with the measurement units based on the CRS of the DEM layer."""
        raster_name = self.dlg.cmb_dem.currentText()
        raster_layer = next((layer for layer in QgsProject.instance().mapLayers().values() if layer.name() == raster_name), None)

        if not raster_layer:
            self.iface.messageBar().pushMessage("Error", "Select a valid DEM layer", level=3)
            return
        
        # Check if the CRS of the layers is geographic
        dem_crs = raster_layer.crs()

        # Get the linear unit
        distance_unit = dem_crs.mapUnits()

        if distance_unit == QgsUnitTypes.DistanceMeters:
            self.dlg.lbl_hmin.setText("m")
            self.dlg.lbl_hmax.setText("m")
            self.dlg.lbl_hmed.setText("m")
            self.dlg.lbl_A.setText("m^2")

        elif distance_unit == QgsUnitTypes.DistanceFeet:
            self.dlg.lbl_hmin.setText("ft")
            self.dlg.lbl_hmax.setText("ft")
            self.dlg.lbl_hmed.setText("ft")
            self.dlg.lbl_A.setText("ft^2")
        else:
            self.dlg.lbl_hmin.setText("grad")
            self.dlg.lbl_hmax.setText("grad")
            self.dlg.lbl_hmed.setText("grad")
            self.dlg.lbl_A.setText("grad")

    def get_band_count(self):
        """Get the number of bands in the selected raster layer."""
        raster_name = self.dlg.cmb_dem.currentText()
        raster_layer = next((layer for layer in QgsProject.instance().mapLayers().values() if layer.name() == raster_name), None)
        if raster_layer:
            return raster_layer.bandCount()
        return 0
        
    def calculate_hypsometric_curve(self):
        """Perform hypsometric calculations."""

        # progress bar
        self.dlg.progressBar.setValue(0)

        # Clear your memory
        self.clear_memory()

        raster_name = self.dlg.cmb_dem.currentText()
        raster_layer = next((layer for layer in QgsProject.instance().mapLayers().values() if layer.name() == raster_name), None)

        if not raster_layer:
            self.iface.messageBar().pushMessage("Error", "Select a valid DEM layer", level=3)
            return
        
        # Check if the CRS of the layers is geographic
        dem_crs = raster_layer.crs()

        if dem_crs.isGeographic():
            # Show a warning and stop the calculation
            QMessageBox.warning(
                None,
                "Attenzione: CRS Geografico",
                "il layer DEM ha un CRS geografico (coordinate in gradi). "
                "Per il calcolo e' necessario un sistema proiettato, come UTM."
            )
            return

        # Get the linear unit
        distance_unit = dem_crs.mapUnits()

        if distance_unit == QgsUnitTypes.DistanceMeters:
            self.dlg.lbl_hmin.setText("m")
            self.dlg.lbl_hmax.setText("m")
            self.dlg.lbl_hmed.setText("m")
            self.dlg.lbl_A.setText("m^2")

        elif distance_unit == QgsUnitTypes.DistanceFeet:
            self.dlg.lbl_hmin.setText("ft")
            self.dlg.lbl_hmax.setText("ft")
            self.dlg.lbl_hmed.setText("ft")
            self.dlg.lbl_A.setText("ft^2")
        else:
            self.dlg.lbl_hmin.setText("grad")
            self.dlg.lbl_hmax.setText("grad")
            self.dlg.lbl_hmed.setText("grad")
            self.dlg.lbl_A.setText("grad")

        band_index = int(self.dlg.cmb_band.currentText())

        # Get the raster layer dataProvider
        provider = raster_layer.dataProvider()

        # Use dataProvider to get bandwidth statistics
        band_stats = provider.bandStatistics(band_index, QgsRasterBandStats.All)     

        # Extract min and max values
        h_min = band_stats.minimumValue
        h_max = band_stats.maximumValue

        # View min and max
        self.dlg.lineEdit_hmin.setText(f"{h_min:.2f}")
        self.dlg.lineEdit_hmax.setText(f"{h_max:.2f}")

        self.dlg.progressBar.setValue(10)
        
        # Area calculations ok
        cell_area = abs(raster_layer.rasterUnitsPerPixelX() * raster_layer.rasterUnitsPerPixelY())

        self.dlg.progressBar.setValue(15)

        # Get the raster size (number of rows and columns)
        width = raster_layer.width()
        height = raster_layer.height()

        self.dlg.progressBar.setValue(20)

        # Creates a QgsRectangle that represents the entire raster area
        extent = raster_layer.extent()
        rect = QgsRectangle(extent.xMinimum(), extent.yMinimum(), extent.xMaximum(), extent.yMaximum())

        self.dlg.progressBar.setValue(25)

        # Get data block for specified band
        block = provider.block(band_index, rect, width, height)

        self.dlg.progressBar.setValue(30)

        # Convert the block data to a numpy array (first to bytes, then to float32)
        data = np.frombuffer(block.data(), dtype=np.float32).reshape((height, width))

        self.dlg.progressBar.setValue(35)

        # Create a mask to identify valid pixels (not NoData)
        valid_mask = ~np.isnan(data)

        self.dlg.progressBar.setValue(40) 

        # Get the name of the selected basin layer from the combobox
        basin_layer_name = self.dlg.cmb_polibac.currentText()

        # Select the basin vector layer
        basin_layer = next((layer for layer in QgsProject.instance().mapLayers().values() if layer.name() == basin_layer_name), None)

        self.dlg.progressBar.setValue(45)
        
        # Check if the basin layer was found
        if basin_layer is None:
            self.iface.messageBar().pushMessage("Error", "No basin layer found with the selected name", level=3)
            return

        # Check if the layer is a polygon
        if basin_layer.geometryType() != QgsWkbTypes.PolygonGeometry:
            self.iface.messageBar().pushMessage("Error", "Selected layer is not a polygon layer", level=3)
            return

        polygon_crs = basin_layer.crs()

        if polygon_crs.isGeographic():
            # Show a warning and stop the calculation
            QMessageBox.warning(
                None,
                "Attenzione: CRS Geografico",
                "il layer del bacino ha un CRS geografico (coordinate in gradi). "
                "Per il calcolo e' necessario un sistema proiettato, come UTM."
            )
            return
        
        # Check if the CRS are the same (DEM layer and polygon)
        if dem_crs != polygon_crs:
            QMessageBox.warning(
                None,
                "CRS Non Compatibili",
                "Il CRS del layer DEM e' diverso da quello del layer poligono del bacino. "
                "Assicurati che entrambi i layer abbiano lo stesso CRS."
            )
            return

        # Get the geometry of the pelvis (assumed to be a single polygon)
        feature = basin_layer.getFeature(0)  # Make sure you get a valid feature

        if not feature.isValid():
            self.iface.messageBar().pushMessage("Error", "Invalid feature in basin layer", level=3)
            return

        basin_geom = feature.geometry()

        # Check if the basin geometry is valid
        if basin_geom.isEmpty() or not basin_geom.isGeosValid():
            self.iface.messageBar().pushMessage("Error", "Invalid or empty geometry for the basin layer", level=3)
            return

        self.dlg.progressBar.setValue(50)
        
        # Create a mask using the pelvis polygon
        mask = np.zeros((height, width), dtype=bool)

        self.dlg.progressBar.setValue(0)

        for row in range(height):
            for col in range(width):
                # Get the coordinate of the cell center
                x = extent.xMinimum() + col * raster_layer.rasterUnitsPerPixelX()
                y = extent.yMaximum() - row * raster_layer.rasterUnitsPerPixelY()
                point = QgsPointXY(x, y)

                # Check if the point is inside the basin polygon
                if basin_geom.contains(QgsGeometry.fromPointXY(point)):
                    mask[row, col] = True

            self.dlg.progressBar.setValue( int((row + 1) / height * 100))

        self.dlg.progressBar.setValue(55)
        
        # Apply mask to data block
        masked_data = data[mask]

        self.dlg.progressBar.setValue(60)
        
        # Count valid and NoData cells
        valid_cells = np.count_nonzero(~np.isnan(masked_data))
        # no_data_cells = np.count_nonzero(np.isnan(masked_data))

        self.dlg.progressBar.setValue(65)  
        
        # Calculate total area using valid cells
        total_area = valid_cells * cell_area
        self.dlg.lineEdit_A.setText(f"{total_area:.2f}")

        self.dlg.progressBar.setValue(70)  

        # Retrieves the number of user-defined classes
        num_classes = self.dlg.spinBox_classi.value()

        # Calculate elevation ranges
        intervals = np.linspace(h_min, h_max, num_classes + 1)

        class_areas, cumulative_areas = [], []

        self.dlg.progressBar.setValue(75)  
        
        # Get the cumulative areas for each interval
        cumulative_areas = self.calculate_area_in_range(raster_layer, cell_area, band_index, basin_geom)

        # Verify that the first value of the cumulative areas is equal to the total area
        if total_area != cumulative_areas[0]:
            cumulative_areas[0] = total_area  # Synchronize the value for security

        self.dlg.progressBar.setValue(80) 

        # There is no need to recalculate cumulative areas; we can derive them directly from cumulative_areas
        class_areas = [cumulative_areas[i] - cumulative_areas[i + 1] for i in range(len(cumulative_areas) - 1)]
        class_areas.append(cumulative_areas[-1])  # Add the last (smallest) area     

        self.dlg.progressBar.setValue(85) 

        # Populate the table with ranges, cumulative and total areas
        self.populate_table(intervals, cumulative_areas, total_area, h_min, h_max)
    
        self.dlg.progressBar.setValue(90)  

        # Hypsometric index
        h_med = self.calculate_hypsometric_mean(cumulative_areas, intervals, total_area, h_min)
        self.dlg.lineEdit_hmed.setText(f"{h_med:.2f}")
        hi = (h_med - h_min) / (h_max - h_min)
        self.dlg.lineEdit_HI.setText(f"{hi:.3f}")

        self.dlg.progressBar.setValue(95)  

        # draw the graph
        self.plot_graph(cumulative_areas, total_area, h_min, h_max, h_med)

        self.dlg.progressBar.setValue(100)  # Initialize the progress bar
        self.dlg.progressBar.setValue(0)  
        

    def create_contour_polygon(self, valid_mask, raster_layer):
        """Creates a boundary polygon based on valid pixels."""
        # Find the coordinates of valid pixels (pixels that are 'True' in the valid_mask)
        valid_coords = np.column_stack(np.where(valid_mask))

        # Get the CRS of the current project
        project_crs = QgsProject.instance().crs()

        points = []
        for coord in valid_coords:
            if len(coord) == 2:  # Check that 'coord' has 2 values
                row, col = coord  # Now valid_coords is two-dimensional (row, col)
            else:
                continue  # If coord' does not have 2 values, skip the loop for this element

            # Calculate the x, y position in the raster reference system
            x = raster_layer.extent().xMinimum() + col * raster_layer.rasterUnitsPerPixelX()
            y = raster_layer.extent().yMaximum() - row * raster_layer.rasterUnitsPerPixelY()
            point = QgsPointXY(x, y)

            # Transforming geometry into the project CRS
            point = point.transform(raster_layer.crs(), project_crs)
            points.append(point)

        if len(points) == 0:
            return None

        # Create a polygon from the coordinate contour
        contour_polygon = QgsGeometry.fromPolygonXY([points])

        return contour_polygon


    def add_polygon_to_map(self, polygon):
        """Adds the contour polygon to the map."""
        # Get the CRS of the current project
        project_crs = QgsProject.instance().crs()

        # Create a temporary vector layer for the polygon
        fields = QgsFields()
        fields.append(QgsField("id", QVariant.Int))
        layer = QgsVectorLayer("Polygon?crs=" + project_crs.toWkt(), "Contour Polygon", "memory")
        layer.dataProvider().addAttributes(fields)
        layer.updateFields()

        # Create a feature with the polygon and add it to the layer
        feature = QgsFeature()
        feature.setGeometry(polygon)
        feature.setAttributes([1])  # ID attributo
        layer.dataProvider().addFeature(feature)

        # Add layer to map
        QgsProject.instance().addMapLayer(layer)

    def calculate_area_in_range(self, raster_layer, cell_area, band_index, basin_geom):
        """
        Calculate the cumulative areas of pixels in elevation ranges within the basin polygon
        in an optimized manner.
        """
        # Get the raster layer data provider
        provider = raster_layer.dataProvider()

        # Extract raster extent
        extent = raster_layer.extent()

        # Get the width and height of the raster (number of rows and columns)
        width = raster_layer.width()
        height = raster_layer.height()

        # Use dataProvider to get data block for bandwidth
        rect = QgsRectangle(extent.xMinimum(), extent.yMinimum(), extent.xMaximum(), extent.yMaximum())
        block = provider.block(band_index, rect, width, height)

        # Converti i dati del blocco in un array numpy
        data = np.frombuffer(block.data(), dtype=np.float32).reshape((height, width))

        # Handle NaN (NoData) values ​​in data
        data = np.nan_to_num(data, nan=np.nan)

        # Get bandwidth statistics (min and max)
        band_stats = provider.bandStatistics(band_index, QgsRasterBandStats.All)
        h_min = band_stats.minimumValue
        h_max = band_stats.maximumValue

        # Get the number of classes from the spinBox_classes widget
        num_classes = self.dlg.spinBox_classi.value()

        # Calculate elevation ranges based on the number of classes
        intervals = np.linspace(h_min, h_max, num_classes + 1)

        # Create a global mask for the basin
        mask = np.zeros((height, width), dtype=bool)

        self.dlg.progressBar.setValue(0) #barra di avanzamento

        for row in range(height):
            for col in range(width):
                x = extent.xMinimum() + col * raster_layer.rasterUnitsPerPixelX()
                y = extent.yMaximum() - row * raster_layer.rasterUnitsPerPixelY()
                point = QgsPointXY(x, y)
                if basin_geom.contains(QgsGeometry.fromPointXY(point)):
                    mask[row, col] = True
        
            self.dlg.progressBar.setValue( int((row + 1) / height * 100))

        # Apply mask to raster to get only valid pixels inside basin
        valid_data = data[mask]

        # Initialize list for cumulative areas
        area_cumulative_list = []

        # Calculate the areas for each interval
        cumulative_area = 0

        self.dlg.progressBar.setValue(0) 

        for i in range(num_classes):
            lower = intervals[i]
            upper = intervals[i + 1]

            # Creates a mask for pixels within the current range
            interval_mask = (valid_data >= lower) & (valid_data < upper)

            # Calculate the area for pixels in the range
            area = np.sum(interval_mask) * cell_area

            # Update cumulative area
            cumulative_area += area
            area_cumulative_list.append(cumulative_area)

            self.dlg.progressBar.setValue( int((i + 1) / num_classes * 100))

        # Reverse the order of the list
        area_cumulative_list = area_cumulative_list[::-1]

        return area_cumulative_list

        
    def calculate_hypsometric_mean(self, cumulative_areas, intervals, total_area, h_min):
        """
        Calculates the hypsometric mean (average height) as defined by the formula:
        hmed = 1/A_tot * Integral(0, A_tot) h * dA

        cumulative_areas: Array of cumulative areas
        intervals: Elevation interval
        total_area: Total area of the raster
        h_min: Minimum height
        """
        # Verify that the ranges are aligned correctly with the cumulative areas
        if len(intervals) == len(cumulative_areas) + 1:
            intervals = intervals[:-1]  # Remove the last interval if it is in excess

        # Initialize the weighted sum
        weighted_sum = 0.0

        # Calculate the weighted sum
        for i in range(len(intervals) - 1):
            # Calculate the height for the interval (h = intervals[i] - h_min)
            h = intervals[i] - h_min

            # Calculate the area for the interval (dA = a_cum[i] - a_cum[i+1])
            if i < len(intervals) - 2:
                dA = cumulative_areas[i] - cumulative_areas[i + 1]
            else:
                dA = cumulative_areas[i]  # Ultimo intervallo, l'area e' l'area totale

            # Make sure dA is not negative (if there is any error in the data)
            if dA < 0:
                dA = 0

            # Weighted sum of height by area of ​​interval
            weighted_sum += h * dA

        # The hypsometric mean is the weighted sum divided by the total area
        if total_area > 0:
            hmed = weighted_sum / total_area
        else:
            hmed = 0  # In case of total area equal to zero

        return hmed


    def populate_table(self, intervals, cumulative_areas, total_area, h_min, h_max):
        """Fill table with hypsometric data."""
        self.dlg.tableWidget_tabella.setRowCount(len(intervals) - 1)
        for i in range(len(intervals) - 1):
            h = intervals[i] - h_min
            h_h_tot = h / (h_max - h_min)
            a_cum = cumulative_areas[i]
            a_cum_norm = a_cum / total_area
            # d_a = cumulative_areas[i - 1] - a_cum if i > 0 else a_cum - cumulative_areas[i + 1]
            d_a = a_cum - cumulative_areas[i + 1] if i < len(intervals) - 2 else a_cum

            self.dlg.tableWidget_tabella.setItem(i, 0, QTableWidgetItem(f"{intervals[i]:.2f}-{intervals[i + 1]:.2f}"))
            self.dlg.tableWidget_tabella.setItem(i, 1, QTableWidgetItem(f"{a_cum:.2f}"))
            self.dlg.tableWidget_tabella.setItem(i, 2, QTableWidgetItem(f"{a_cum_norm:.4f}"))
            self.dlg.tableWidget_tabella.setItem(i, 3, QTableWidgetItem(f"{d_a:.2f}"))
            self.dlg.tableWidget_tabella.setItem(i, 4, QTableWidgetItem(f"{h:.2f}"))
            self.dlg.tableWidget_tabella.setItem(i, 5, QTableWidgetItem(f"{h_h_tot:.4f}"))
        
        # Align columns after writing data into table
        self.align_columns()

        # Resize columns 3 and 6
        self.resize_columns()
  
    def plot_graph(self, cumulative_areas, total_area, h_min, h_max, hypsometric_mean):
        """Plot hypsometric curve."""
        # Normalize cumulative areas to total area
        a_norm = [a / total_area for a in cumulative_areas]

        # Calculate the normalized intervals from h_min to h_max
        h_norm = [(interval - h_min) / (h_max - h_min) for interval in np.linspace(h_min, h_max, len(cumulative_areas))]

         # Create a new figure with the specified size (5.21 x 3.51 inches corresponding to 521x351 pixels)
        fig, ax = plt.subplots(figsize=(5.21, 3.51))
        
         # Plot the hypsometric curve
        ax.plot(a_norm, h_norm, color=self.selected_color.name(), label="Curva ipsometrica")
        ax.set_xlabel("Area relativa a/A")
        ax.set_ylabel("Arltezza relativa h/H")
        ax.set_title("Grafico curva ipsometrica")
        ax.legend()
        ax.grid(True)  # Show the grid
        
        # Set the x and y axis limits from 0 to 1
        ax.set_xlim(0, 1.1)
        ax.set_ylim(0, 1.1)

        # Show HAI point on curve if checkbox is selected
        if self.dlg.checkBox_HI.isChecked():
            # Calculate normalized HI
            hi_normalized = hypsometric_mean / (h_max - h_min)  # h/H

            # Find the closest point to the hypsometric curve
            for i in range(len(h_norm) - 1):
                if h_norm[i] <= hi_normalized <= h_norm[i + 1]:
                    # Linear interpolation to find the exact value of a/A
                    slope = (a_norm[i + 1] - a_norm[i]) / (h_norm[i + 1] - h_norm[i])
                    hi_projection = a_norm[i] + slope * (hi_normalized - h_norm[i])  # a/A
                    break
            
            # Add dashed lines projected onto the axes
            ax.axhline(hi_normalized, color='green', linestyle='--', linewidth=0.8)
            
            # Draw a small circle on the point HI on the curve
            ax.plot([hi_projection], [hi_normalized], 'o', color='red', label="HI")

            # Add the HI value as a label
            hi_value = float(self.dlg.lineEdit_HI.text())

            ax.text(
                hi_projection + 0.02,  # Position x slightly to the right of the point
                hi_normalized + 0.02,  # Position y slightly above the point
                f"HI = {hi_value:.3f}",  # Text with HI value
                color="black",
                fontsize=9,
                fontweight='bold'       # Adds bold to text
            )          

        # Adjust layout to ensure titles and labels fit within the figure
        plt.tight_layout()

        # Create the FigureCanvas to display the plot in the graphics view
        canvas = FigureCanvas(fig)
        canvas.setFixedSize(521, 351)  # Ensure the canvas fits the graphics view size

        # Clear the previous content and add the new plot to the QGraphicsView
        self.dlg.graphicsView_grafico.setScene(QGraphicsScene())
        self.dlg.graphicsView_grafico.scene().addWidget(canvas)

        # Draw the canvas
        canvas.draw()

    def initialize_graph(self):
        """Initialize the graph with axes from 0 to 1 and show the grid."""
        # Create a figure and axis for the plot
        fig, ax = plt.subplots(figsize=(5.21, 3.51)) # Size in inches, corresponding to 521x351 pixels at 100 dpi
        
        # Set the x and y axis limits from 0 to 1
        ax.set_xlim(0, 1.1)
        ax.set_ylim(0, 1.1)
        
        # Set labels for the axes
        ax.set_xlabel("Area relativa a/A", labelpad=15)
        ax.set_ylabel("Altezza relativa h/H", labelpad=10)
        ax.set_title("Grafico curva ipsometrica", pad=20)
        
        # Add a grid
        ax.grid(True)
        
        # Adjust the margins of the plot to make sure labels and title are not cut off
        # plt.subplots_adjust(bottom=0.15, left=0.1, right=0.9, top=0.85)  # Modifica i margini (aumenta bottom, top, left, right)
    
        # Use tight_layout to automatically adjust the subplots to fit the figure area
        plt.tight_layout()  # Ottimizza automaticamente i margini per evitare che vengano tagliati
        
        # Create a canvas for displaying the figure in the graphics view
        canvas = FigureCanvas(fig)

        # Set the canvas size to match the graphics view
        canvas.setFixedSize(521, 351)
        
        # Clear the previous content and add the new plot to the QGraphicsView
        self.dlg.graphicsView_grafico.setScene(QGraphicsScene())
        self.dlg.graphicsView_grafico.scene().addWidget(canvas)
        
        # Draw the canvas
        canvas.draw()

    def update_graph_color(self):
        """Update the chart color without recalculating the values."""
        # Retrieve data from UI widgets
        hi_value = float(self.dlg.lineEdit_HI.text())   # HI

        # Retrieve data from table
        a_norm = []
        h_norm = []
        
        for row in range(self.dlg.tableWidget_tabella.rowCount()):
            a_norm.append(float(self.dlg.tableWidget_tabella.item(row, 2).text()))   # a/A
            h_norm.append(float(self.dlg.tableWidget_tabella.item(row, 5).text()))   # h/H

        # Create a new figure with the specified dimensions (5.21 x 3.51 inches)
        fig, ax = plt.subplots(figsize=(5.21, 3.51))
        
        # Draw the hypsometric curve with the selected color
        ax.plot(a_norm, h_norm, color=self.selected_color.name(), label="Curva ipsometrica")
        ax.set_xlabel("Area relativa a/A")
        ax.set_ylabel("Altezza relativa h/H")
        ax.set_title("Grafico curva ipsometrica")
        ax.legend()
        ax.grid(True)  # Show grid
        
        # Set the x and y axis limits from 0 to 1.1
        ax.set_xlim(0, 1.1)
        ax.set_ylim(0, 1.1)

        # Show HAI point on curve if checkbox is selected
        if self.dlg.checkBox_HI.isChecked():
            
            # Find the closest point to the hypsometric curve
            for i in range(len(h_norm) - 1):
                if h_norm[i] <= hi_value <= h_norm[i + 1]:
                    # Linear interpolation to find the exact value of a/A
                    slope = (a_norm[i + 1] - a_norm[i]) / (h_norm[i + 1] - h_norm[i])
                    hi_projection = a_norm[i] + slope * (hi_value - h_norm[i])  # a/A
                    break
            
            # Add dashed lines projected onto the axes
            ax.axhline(hi_value, color='green', linestyle='--', linewidth=0.8)
            
            # Draw a small circle on point HI on the curve
            ax.plot([hi_projection], [hi_value], 'o', color='red', label="HI")

            # Add the HI value as a label
            ax.text(
                hi_projection + 0.02,  # Place x slightly to the right of the dot
                hi_value + 0.02,  # Place y slightly above the point
                f"HI = {hi_value:.3f}",  # Text with HI value
                color="black",
                fontsize=9,
                fontweight='bold'       # Adds bold to text
            )

        # Adjust the layout to ensure titles and labels fit properly
        plt.tight_layout()

        # Create the FigureCanvas to display the graph in the graphics view
        canvas = FigureCanvas(fig)
        canvas.setFixedSize(521, 351)  # Set the canvas to a fixed size

        # Clears the previous content and adds the new chart to the graph view
        self.dlg.graphicsView_grafico.setScene(QGraphicsScene())
        self.dlg.graphicsView_grafico.scene().addWidget(canvas)

        # Draw the canvas
        canvas.draw()

    
    def reset_fields(self):
        """Reset all input and output fields."""

        # Check if there is data in the table before proceeding
        if self.dlg.tableWidget_tabella.rowCount() > 0:

            # Create the confirmation message
            reply = QMessageBox.question(self.dlg, 'Conferma',
                                        "Sei sicuro di voler resettare tutti i campi e i dati?",
                                        QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            
            if reply == QMessageBox.Yes:

                # If "Yes"
                self.dlg.lineEdit_hmin.setText("0.00")
                self.dlg.lineEdit_hmax.setText("0.00")
                self.dlg.lineEdit_A.setText("0.00")
                self.dlg.lineEdit_hmed.setText("0.00")
                self.dlg.lineEdit_HI.setText("0.00")

                # Reset the tabel
                self.dlg.tableWidget_tabella.clearContents()  # Svuota il contenuto della tabella
                self.dlg.tableWidget_tabella.setRowCount(0)   # Elimina tutte le righe

                # Reset any stored data related to the computation
                self.cumulative_areas = []
                self.total_area = 0.0
                self.h_min = 0.0
                self.h_max = 0.0
                self.hypsometric_mean = 0.0

                # Clear your memory
                self.clear_memory()

                # Reset the graph to the initial state with axes from 0 to 1 and grid
                self.initialize_graph()
            else:
                # If "No
                pass
    
    def clear_memory(self):
        """Clear internal memory of stored data."""
        self.cumulative_areas = []
        self.total_area = 0.0
        self.h_min = 0.0
        self.h_max = 0.0
        self.hypsometric_mean = 0.0

    def save_table(self):
        """Save table data to a CSV file."""
        table = self.dlg.tableWidget_tabella
        filename, _ = QtWidgets.QFileDialog.getSaveFileName(self.dlg, "Save Table", "", "CSV Files (*.csv);;Text Files (*.txt)")
        
        # Stop if user pressed "Cancel"
        if not filename:
            return
       
        # Retrieve decimal separator from combobox (0 for period, 1 for comma)
        decimal_separator = '.' if self.dlg.cmb_decimal.currentIndex() == 0 else ','

        if filename:
            try:
                with open(filename, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f, delimiter=';')
                    writer.writerow(["Intervalli", "a_cum", "a_cum/A", "dA", "h", "h/H"])
                    
                    for row in range(table.rowCount()):
                        row_data = []
                        for col in range(table.columnCount()):
                            
                            cell_text = table.item(row, col).text()
                            
                            try:
                                # If the value is numeric, convert it to the correct format
                                numeric_value = float(cell_text)
                                formatted_value = f"{numeric_value:.6f}".replace('.', decimal_separator)
                                row_data.append(formatted_value)
                            except ValueError:
                                # If it is not a number, add the text as is
                                row_data.append(cell_text)
                        
                        writer.writerow(row_data)               

                # Show a confirmation message
                QtWidgets.QMessageBox.information(self.dlg, "Salvataggio completato", "I dati sono stati salvati correttamente!")
            
            except Exception as e:
                # If there is an error while saving, it displays an error message
                QtWidgets.QMessageBox.critical(self.dlg, "Errore", f"Si e' verificato un errore durante il salvataggio: {str(e)}")


    def save_graph(self):
        """Save graph to an image file."""
        path, _ = QFileDialog.getSaveFileName(None, "Save Graph", "", "Images (*.png *.jpg)")

        # Stop if user pressed "Cancel"
        if not path:
            return
        
        if path:
            try:
                plt.savefig(path)
                
                # Show a confirmation message
                QMessageBox.information(None, "Salvataggio completato", "Il grafico e' stato salvato correttamente!")
            
            except Exception as e:
                # Show an error message if there is a problem while saving
                QMessageBox.critical(None, "Errore", f"Si e' verificato un errore durante il salvataggio del grafico: {str(e)}")
    

    def align_columns(self):
        """Align table columns as required."""
        table = self.dlg.tableWidget_tabella
        
        # Iterate over all rows and columns
        for row in range(table.rowCount()):
            for col in range(table.columnCount()):
                item = table.item(row, col)
                if item:
                    # Align the first column to the left
                    if col == 0:
                        item.setTextAlignment(Qt.AlignLeft)
                    else:
                        # Align all other columns to the right
                        item.setTextAlignment(Qt.AlignRight)
    
    def resize_columns(self):
        """Resize columns 3 and 6 of the table to a width of 70."""
        table = self.dlg.tableWidget_tabella
        table.setColumnWidth(2, 60)  # Column 3 has index 2 (indexes start at 0)
        table.setColumnWidth(3, 90)
        table.setColumnWidth(4, 70)
        table.setColumnWidth(5, 60)  # Column 6 has index 5